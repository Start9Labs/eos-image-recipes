{{- $image := or .image "pureos-debos" -}}
{{- $results_dir := or .results_dir "$ARTIFACTDIR/results" -}}

{{- $arch := or .arch "amd64" -}}
{{- $kernel_flavour := or .kernel_flavour $arch -}}

{{- $suite := or .suite "byzantium" -}}
{{- $version := or .version "10.0" -}}
{{- $environment := or .environment "gnome" -}}
{{- $imagestyle := or .imagestyle "live" -}}

{{- $mirror := or .mirror "https://repo.pureos.net/pureos" -}}

architecture: {{ $arch }}

actions:
  - action: debootstrap
    suite: {{ $suite }}
    components:
      - main
    mirror: {{ $mirror }}
    keyring-package: pureos-archive-keyring
    keyring-file: /usr/share/keyrings/pureos-archive-keyring.gpg

  - action: run
    description: Set up APT sources
    chroot: true
    script: scripts/os/setup-apt-sources.sh {{ $mirror }} {{ $suite }}

  #
  # Install OS packages
  #
{{ if eq $environment "gnome" }}
  - action: apt
    recommends: true
    packages: [ pureos-gnome,
                adwaita-qt ]
{{ else if eq $environment "plasma" }}
  - action: apt
    recommends: true
    packages: [ pureos-plasma ]
{{ end }}

  - action: apt
    recommends: true
    packages: [ systemd-sysv,
                linux-image-{{ $kernel_flavour }},
                casper,
                squashfs-tools ]

{{ if eq $imagestyle "oem" }}
  - action: apt
    packages: [ calamares-pureos-oem ]
{{ else }}
  - action: apt
    packages: [ calamares ]
{{ end }}

{{ if eq $arch "amd64" }}
  - action: apt
    recommends: true
    packages: [ isolinux,
                syslinux-efi,
                grub-pc-bin,
                grub-efi-amd64-bin,
                grub2-common,
                grub-gfxpayload-lists ]
{{ else if eq $arch "arm64" }}
  - action: apt
    recommends: true
    packages: [ grub-uboot-bin,
                grub2-common ]
{{ end }}

  - action: run
    chroot: true
    command: apt clean

  #
  # Configure the OS image
  #
  - action: run
    chroot: true
    command: echo pureos > /etc/hostname

  - action: run
    chroot: true
    script: scripts/os/01-set-locale.sh

  - action: run
    chroot: true
    script: scripts/os/02-plymouth-theme.sh

  - action: run
    chroot: true
    script: scripts/os/03-command-not-found.sh

  - action: run
    chroot: true
    script: scripts/os/04-apt-appstream.sh

{{ if eq $imagestyle "oem" }}
  - action: run
    chroot: true
    script: scripts/os/oem/01-setup-oem.sh

  - action: overlay
    source: overlays/oem/
{{ end }}

  - action: run
    chroot: true
    script: scripts/os/05-package-hacks.sh

  #
  # Finish OS image configuration
  #
  - action: run
    description: Update initramfs
    label: update-initramfs
    chroot: true
    command: CASPER_GENERATE_UUID=1 update-initramfs -k all -t -u

  - action: run
    description: Collect infos & logs
    label: collect-logs
    chroot: true
    script: scripts/os/collect-logs.sh

  #
  # Create ISO image contents
  #
  - action: run
    label: cleanup
    command: rm -rf "$ARTIFACTDIR/disk-ws-tmp/"

  - action: run
    label: make-ws
    command: bash -c 'mkdir -p $ARTIFACTDIR/disk-ws-tmp/{contents/{EFI/boot,boot/grub/x86_64-efi,isolinux,casper},tmp}'

  - action: run
    description: Copy kernel & initramfs
    label: copy-kernel-initramfs
    script: scripts/disk/copy-kernel-initramfs.sh

{{ if eq $arch "amd64" }}
  - action: run
    description: Copy bootloaders
    label: copy-bootloaders
    script: scripts/disk/copy-bootloaders.sh
{{ end }}

  - action: run
    description: Create SquashFS image
    label: make-squashfs
    command: mksquashfs
               $ROOTDIR
               $ARTIFACTDIR/disk-ws-tmp/contents/casper/filesystem.squashfs
               -e build-info
               -comp zstd

  - action: run
    label: copy-package-list-disk
    command: cp $ROOTDIR/build-info/packages.manifest $ARTIFACTDIR/disk-ws-tmp/contents/casper/filesystem.manifest

{{ if eq $arch "amd64" }}
  - action: run
    description: Make bootloader config files
    label: make-bootloader-config
    script: scripts/disk/make-bootloader-config.sh {{ $imagestyle }} {{ $version }}

  - action: run
    description: Create UEFI boot disk image
    label: make-uefi-boot-disk
    script: scripts/disk/make-uefi-boot-disk.sh {{ $arch }}
{{ end }}

  - action: run
    description: Setup disk info
    label: setup-disk-info
    script: scripts/disk/setup-disk-info.sh {{ $suite }} {{ $version }} {{ $arch }}

  #
  # Write image
  #
  - action: run
    command: mkdir -p "{{ $results_dir }}"
  - action: run
    description: Create hybrid ISO image
    label: make-isohybrid
    command: xorriso
               -outdev "{{ $results_dir }}/{{ $image }}.iso"
               -volid "PureOS {{ $version }} {{ $environment }} ({{ $imagestyle }})"
               -padding 0
               -compliance no_emul_toc
               -map $ARTIFACTDIR/disk-ws-tmp/contents /
               -chmod 0755 / --
               -boot_image isolinux dir=/isolinux
                 -boot_image isolinux system_area=/usr/lib/ISOLINUX/isohdpfx.bin
               -boot_image any next
                 -boot_image any efi_path=boot/grub/efi.img
                 -boot_image isolinux partition_entry=gpt_basdat

  - action: run
    description: Make zsync file
    label: zsync
    command: cd "{{ $results_dir }}" && zsyncmake -C -b 2048 -u {{ $image }}.iso "{{ $results_dir }}/{{ $image }}.iso"

  - action: run
    description: Copy package list
    label: copy-package-list
    command: cp $ROOTDIR/build-info/packages.manifest "{{ $results_dir }}/{{ $image }}.packages"

  - action: run
    description: Write checksums
    label: checksums
    script: scripts/finish/make-checksums.sh "{{ $results_dir }}"

  #
  # Cleanup
  #
  - action: run
    description: Cleanup
    label: cleanup
    command: rm -rf "$ARTIFACTDIR/disk-ws-tmp/"
